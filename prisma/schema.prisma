// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model Doctor {
  id           Int           @id @default(autoincrement())
  first_name   String
  last_name    String
  specialty    String
  appointments Appointment[]

  // @@unique([first_name, last_name])
}

model Appointment {
  id            Int      @id @default(autoincrement())
  practice_name String
  date          DateTime @default(now())
  doctor        Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId      Int
  reason        String
  patient       Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  patientId Int
  @@map("appointments")
}

model Patient {
  id           Int           @id @default(autoincrement())
  first_name   String
  last_name    String
  dob          DateTime      @db.Date
  appointments Appointment[]
}

// Like we've discussed this morning, to continue yesterday's exercise, we're going to add a new model to our app!

// Instructions
// - Create a new Patient model in your schema
// - It should have the following attributes
//   - First Name
//   - Last Name
//   - Date of Birth
//   - A patient has many appointments

// - Create also a router and a controller for the patients, and implement the following routes
//   - Base CRUD
//   - "/patients/:id/appointments" to see a list of the patient's appointments
//   - "/patients/:id/doctors" to see a list of doctors that the patient is seeing
//   -"/patients/:id/doctors?filterPractice=value" to see a list of doctors, filtered by practice
